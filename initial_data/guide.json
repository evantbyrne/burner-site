[{"id":"1","order":"1","guidecategory":"1","title":"Installation","url":"install","content":"<p>Getting Burner up and running on a development machine is a pretty simple process. The very first step is to configure your basic site settings, which are located in <code>app\/config\/development\/config.php<\/code>. The most important config option to pay attention to at this time is the <code>base_url<\/code>, which should be set to the root URL of your website:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Application's Base URL (including trailing slash)\r\nConfig::set('base_url', 'localhost:8888\/burner-site\/');<\/pre>\r\n\r\n<p>Next, the MySQL settings need to be configured. These can be found in <code>app\/config\/development\/db.php<\/code>:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">Config::set('database',array(\r\n\t\r\n\t'host'=&gt;'localhost',\r\n\t'username'=&gt;'root',\r\n\t'password'=&gt;'root',\r\n\t'database'=&gt;'burner_site'\r\n\t\r\n));<\/pre>\r\n\r\n<p>Lastly, run the following commands from the terminal. This will generate unique hash settings for authentication; create the MySQL tables for the user, group, and membership models; create the admin group if it doesn't exist; and it will prompt you to create an admin user.<\/p>\r\n\r\n<pre class=\"prettyprint\">cd path\/to\/directory\/containing\/index.php\r\nphp index.php generate_hash_secret development\r\nphp index.php install<\/pre>\r\n\r\n<p>For more information on these commands, please either see their respective documentation pages or use the help command like so:<\/p>\r\n\r\n<pre class=\"prettyprint\">php index.php help generate_hash_secret\r\nphp index.php help install<\/pre>"},{"id":"2","order":"2","guidecategory":"1","title":"Models Overview","url":"models","content":"<p>Models make up the heart and soul of every Burner application. In Burner, models are used to interface with the database in an object-oriented fashion. Each model represents a single table in the database. Additionally, models tell Burner how data can be managed in the admin control panel.<\/p>\r\n\r\n<hr\/>\r\n\r\n<h3>Defining Models<\/h3>\r\n<p>To define a new model, create a PHP file in the <strong>app\/model<\/strong> folder with the name of the model that you want (all lowercase file name). For the sake of example, we'll create a model named <strong>Article<\/strong>, so the file will be <strong>app\/model\/article.php<\/strong>. Now create a class in this file which extends the base model:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Model;\r\n\r\nclass Article extends \\Core\\Model\\Base {\r\n\r\n}<\/pre>\r\n\r\n<p>The next step is to define columns for the model. This is done by adding properties to the class, which have doc comments that define their data types by using the special <strong>@option<\/strong> syntax.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">class Article extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Varchar\r\n     * @option length = 100\r\n     * @option required = The title field is required.\r\n     *\/\r\n    public $title;\r\n\r\n    \/**\r\n     * @option type = Text\r\n     * @option required = The content field is required.\r\n     *\/\r\n    public $content;\r\n\r\n}<\/pre>\r\n\r\n<p>After the model is defined, the table can be created in the database by using the <strong>create<\/strong> command from the terminal.<\/p>\r\n<pre class=\"prettyprint\">php index.php create article<\/pre>\r\n\r\n<p>If you would like to see the table creation SQL before actually creating it, then use the <strong>sql<\/strong> command.<\/p>\r\n<pre class=\"prettyprint\">php index.php sql article<\/pre>\r\n\r\n<p>Model tables can also be dropped by using the <strong>drop<\/strong> command.<\/p>\r\n<pre class=\"prettyprint\">php index.php drop article<\/pre>\r\n\r\n<p>There are more terminal commands available for use as well, so be sure to check out the CLI Commands section of the guides documentation.<\/p>\r\n\r\n<hr\/>\r\n\r\n<h3>Enabling For The Admin<\/h3>\r\n<p>Making it so that model data can be managed in the admin is just a matter of adding the model name to the correct configuration option. To add the article model, just open up <strong>app\/config\/development\/config.php<\/strong> and change the appropriate option, like so:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">Config::set('admin_models', array(\r\n\t'Users' =&gt; array('user', 'group', 'membership'),\r\n\t'Some Category' =&gt; array('article')\r\n));<\/pre>\r\n\r\n<hr\/>\r\n\r\n<h3>Model API<\/h3>\r\n<p>Once a model has been created, it can be used from within any part of your application in order to query the database. The API covers everything from table creation to complex select queries.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Select\r\n$results = \\App\\Model\\Article::select()->where('title', '=', 'Awesome')->fetch();\r\n\r\n\/\/ Insert\r\n$a = new \\App\\Model\\Article();\r\n$a->title = 'Cool';\r\n$a->content = 'Yup.';\r\n$id = $a->save();\r\n\r\n\/\/ Drop table\r\n\\App\\Model\\Article::drop_table();<\/pre>\r\n\r\n<p>For more complete examples please refer to the remainder of the model guides.<\/p>"},{"id":"3","order":"1","guidecategory":"4","title":"CLI Overview","url":"cli","content":"<p>Burner CMS comes bundled with a collection of useful commands, which are runnable via the terminal. It's also easy to define your own custom terminal commands. Burner's bundled commands can be found in the <code>burner\/command<\/code> directory.<\/p>\r\n<hr\/>\r\n\r\n<h3>Defining Commands<\/h3>\r\n<p>Commands are just PHP classes which have the <code>help()<\/code> and <code>run()<\/code> methods. To create a command, just make a new PHP file in the <code>app\/command<\/code> directory. The file name should be exactly the same as the class name, except all lowercase. So for a command with the class name of <code>Foo<\/code>, the file path (relative to index.php) would be <code>app\/command\/foo.php<\/code>. The content of this file might look something like this:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Command;\r\n\r\nclass Foo {\r\n\r\n    public function help() {\r\n        echo \"Useful information about the command.\\n\\n\";\r\n    }\r\n\r\n    public function run($name) {\r\n        echo \"Hello, $name!\\n\\n\";\r\n    }\r\n\r\n}<\/pre>\r\n\r\n<p>This command could then be run from the terminal like so:<\/p>\r\n<pre class=\"prettyprint lang-xml\">php index.php foo Bob<\/pre>\r\n\r\n<p>Which would output the following:<\/p>\r\n<pre class=\"prettyprint lang-xml\">Hello, Bob!\\n\\n<\/pre>\r\n\r\n<p>And the help message could be displayed by running the help command:<\/p>\r\n<pre class=\"prettyprint lang-xml\">php index.php help foo<\/pre>"},{"id":"4","order":"2","guidecategory":"4","title":"CLI Help Command","url":"cli-help","content":"<p>The help command displays (hopefully) helpful documentation for other commands. Example usage and output:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php help sql<\/pre>\r\n\r\n<pre class=\"prettyprint lang-xml\">sql &lt;model&gt; [, &lt;model&gt;, ... ]\r\n\r\nDescription:\r\n    Generates SQL for a given model(s). Requires database connection.<\/pre>"},{"id":"5","order":"7","guidecategory":"4","title":"CLI SQL Command","url":"cli-sql","content":"<p>The SQL command outputs MySQL <code>CREATE TABLE<\/code> syntax for the given models. Useful for seeing what MySQL Burner's ORM is generating under the hood. Example usage and output:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php sql user<\/pre>\r\n\r\n<pre class=\"prettyprint lang-sql\">CREATE TABLE `user`(\r\n`id` INT NOT NULL AUTO_INCREMENT,\r\nPRIMARY KEY(`id`),\r\n`email` VARCHAR(100),\r\n`password` CHAR(128)\r\n) ENGINE = InnoDB;<\/pre>"},{"id":"6","order":"5","guidecategory":"4","title":"CLI Create Command","url":"cli-create","content":"<p>The create command generates and runs MySQL <code>CREATE TABLE<\/code> syntax for the given models. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php create user<\/pre>"},{"id":"7","order":"6","guidecategory":"4","title":"CLI Drop Command","url":"cli-drop","content":"<p>The drop command generates and runs MySQL <code>DROP TABLE<\/code> syntax for the given models. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php drop user<\/pre>"},{"id":"8","order":"8","guidecategory":"4","title":"CLI Sync Command","url":"cli-sync","content":"<p>The sync command drops and then recreates the MySQL tables for the given models. Useful for making quick model changes in development environments. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php sync user<\/pre>\r\n\r\n<p><strong>Note:<\/strong> MySQL tables are dropped and then recreated when running this command. They are not altered. This means that any data stored in the given models will be lost.<\/p>"},{"id":"9","order":"4","guidecategory":"4","title":"CLI Install Command","url":"cli-install","content":"<p>Creates MySQL tables for the User, Group, and Membership models if they don't already exist; creates 'admin' group if it doesn't exist; and prompts you to create an admin user. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php install<\/pre>\r\n\r\n<p><strong>Note:<\/strong> Only works with MultipleGroups auth plugin (which is the default). Running after insert error shouldn't mess up existing data.<\/p>"},{"id":"10","order":"3","guidecategory":"4","title":"CLI Generate Hash Command","url":"cli-generate-hash","content":"<p>Creates a random string and sets it to 'hash_secret' configuration option, which is used for hashing passwords. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php generate_hash_secret development<\/pre>\r\n\r\n<p><strong>Warning:<\/strong> This will overwrite the app\/config\/&lt;config&gt;\/hash.php file.<\/p>"}]