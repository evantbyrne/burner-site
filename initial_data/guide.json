[{"id":"1","order":"3","guidecategory":"1","title":"Installation","url":"install","content":"<p>Getting Burner up and running on a development machine is a pretty quick process. The very first step is to configure your basic site settings, which are located in <code>app\/config\/development\/config.php<\/code>. The most important config option to pay attention to at this time is the <code>base_url<\/code>, which should be set to the root URL of your website:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Application's Base URL (including trailing slash)\r\nConfig::set('base_url', 'localhost:8888\/burner-site\/');<\/pre>\r\n\r\n<p>Next, the MySQL settings need to be configured. These can be found in <code>app\/config\/development\/db.php<\/code>:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">Config::set('database',array(\r\n\t\r\n\t'host'=&gt;'localhost',\r\n\t'username'=&gt;'root',\r\n\t'password'=&gt;'root',\r\n\t'database'=&gt;'burner_site'\r\n\t\r\n));<\/pre>\r\n\r\n<p>Lastly, run the following commands from the terminal. This will generate unique hash settings for authentication; create the MySQL tables for the user, group, and membership models; create the admin group if it doesn't exist; and it will prompt you to create an admin user.<\/p>\r\n\r\n<pre class=\"prettyprint\">cd path\/to\/directory\/containing\/index.php\r\nphp index.php generate_hash_secret development\r\nphp index.php install<\/pre>\r\n\r\n<p>For more information on these commands, please either see their respective documentation pages or use the help command like so:<\/p>\r\n\r\n<pre class=\"prettyprint\">php index.php help generate_hash_secret\r\nphp index.php help install<\/pre>\r\n<hr\/>\r\n\r\n<h3>HTTPS<\/h3>\r\n<p>To make Burner CMS use HTTPS URLs by default, find the <code>https<\/code> configuration option in <code>app\/config\/development\/config.php<\/code> and change the value to <code>true<\/code>.<\/p>\r\n<pre class=\"prettyprint lang-php\">\/\/ Use HTTPS URLs?\r\nConfig::set('https', true);<\/pre>"},{"id":"2","order":"5","guidecategory":"1","title":"Models Overview","url":"models","content":"<p>Models make up the heart and soul of every Burner application. In Burner, models are used to interface with the database in an object-oriented fashion. Each model represents a single table in the database. Additionally, models tell Burner how data can be managed in the admin control panel.<\/p>\r\n\r\n<hr\/>\r\n\r\n<h3>Defining Models<\/h3>\r\n<p>To define a new model, create a PHP file in the <strong>app\/model<\/strong> folder with the name of the model that you want (all lowercase file name). For the sake of example, we'll create a model named <strong>Article<\/strong>, so the file will be <strong>app\/model\/article.php<\/strong>. Now create a class in this file which extends the base model:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Model;\r\n\r\nclass Article extends \\Core\\Model\\Base {\r\n\r\n}<\/pre>\r\n\r\n<p>The next step is to define columns for the model. This is done by adding properties to the class, which have doc comments that define their data types by using the special <strong>@option<\/strong> syntax.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">class Article extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Varchar\r\n     * @option length = 100\r\n     * @option required = The title field is required.\r\n     *\/\r\n    public $title;\r\n\r\n    \/**\r\n     * @option type = Text\r\n     * @option required = The content field is required.\r\n     *\/\r\n    public $content;\r\n\r\n}<\/pre>\r\n\r\n<p>After the model is defined, the table can be created in the database by using the <strong>create<\/strong> command from the terminal.<\/p>\r\n<pre class=\"prettyprint\">php index.php create article<\/pre>\r\n\r\n<p>If you would like to see the table creation SQL before actually creating it, then use the <strong>sql<\/strong> command.<\/p>\r\n<pre class=\"prettyprint\">php index.php sql article<\/pre>\r\n\r\n<p>Model tables can also be dropped by using the <strong>drop<\/strong> command.<\/p>\r\n<pre class=\"prettyprint\">php index.php drop article<\/pre>\r\n\r\n<p>There are more terminal commands available for use as well, so be sure to check out the CLI Commands section of the guides documentation.<\/p>\r\n\r\n<hr\/>\r\n\r\n<h3>Enabling For The Admin<\/h3>\r\n<p>Making it so that model data can be managed in the admin is just a matter of adding the model name to the correct configuration option. To add the article model, just open up <strong>app\/config\/development\/config.php<\/strong> and change the appropriate option, like so:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">Config::set('admin_models', array(\r\n\t'Users' =&gt; array('user', 'group', 'membership'),\r\n\t'Some Category' =&gt; array('article')\r\n));<\/pre>\r\n\r\n<hr\/>\r\n\r\n<h3>Model API<\/h3>\r\n<p>Once a model has been created, it can be used from within any part of your application in order to query the database. The API covers everything from table creation to complex select queries.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Select\r\n$results = \\App\\Model\\Article::select()->where('title', '=', 'Awesome')->fetch();\r\n\r\n\/\/ Insert\r\n$a = new \\App\\Model\\Article();\r\n$a->title = 'Cool';\r\n$a->content = 'Yup.';\r\n$id = $a->save();\r\n\r\n\/\/ Drop table\r\n\\App\\Model\\Article::drop_table();<\/pre>\r\n\r\n<p>For more complete examples please refer to the remainder of the model guides.<\/p>"},{"id":"3","order":"1","guidecategory":"4","title":"CLI Overview","url":"cli","content":"<p>Burner CMS comes bundled with a collection of useful commands, which are runnable via the terminal. It's also easy to define your own custom terminal commands. Burner's bundled commands can be found in the <code>burner\/command<\/code> directory.<\/p>\r\n<hr\/>\r\n\r\n<h3>Defining Commands<\/h3>\r\n<p>Commands are just PHP classes which have the <code>help()<\/code> and <code>run()<\/code> methods. To create a command, just make a new PHP file in the <code>app\/command<\/code> directory. The file name should be exactly the same as the class name, except all lowercase. So for a command with the class name of <code>Foo<\/code>, the file path (relative to index.php) would be <code>app\/command\/foo.php<\/code>. The content of this file might look something like this:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Command;\r\n\r\nclass Foo {\r\n\r\n    public function help() {\r\n        echo \"Useful information about the command.\\n\\n\";\r\n    }\r\n\r\n    public function run($name) {\r\n        echo \"Hello, $name!\\n\\n\";\r\n    }\r\n\r\n}<\/pre>\r\n\r\n<p>This command could then be run from the terminal like so:<\/p>\r\n<pre class=\"prettyprint lang-xml\">php index.php foo Bob<\/pre>\r\n\r\n<p>Which would output the following:<\/p>\r\n<pre class=\"prettyprint lang-xml\">Hello, Bob!\\n\\n<\/pre>\r\n\r\n<p>And the help message could be displayed by running the help command:<\/p>\r\n<pre class=\"prettyprint lang-xml\">php index.php help foo<\/pre>"},{"id":"4","order":"2","guidecategory":"4","title":"CLI Help Command","url":"cli-help","content":"<p>The help command displays (hopefully) helpful documentation for other commands. Example usage and output:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php help sql<\/pre>\r\n\r\n<pre class=\"prettyprint lang-xml\">sql &lt;model&gt; [, &lt;model&gt;, ... ]\r\n\r\nDescription:\r\n    Generates SQL for a given model(s). Requires database connection.<\/pre>"},{"id":"5","order":"9","guidecategory":"4","title":"CLI SQL Command","url":"cli-sql","content":"<p>The SQL command outputs MySQL <code>CREATE TABLE<\/code> syntax for the given models. Useful for seeing what MySQL Burner's ORM is generating under the hood. Example usage and output:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php sql user<\/pre>\r\n\r\n<pre class=\"prettyprint lang-sql\">CREATE TABLE `user`(\r\n`id` INT NOT NULL AUTO_INCREMENT,\r\nPRIMARY KEY(`id`),\r\n`email` VARCHAR(100),\r\n`password` CHAR(128)\r\n) ENGINE = InnoDB;<\/pre>"},{"id":"6","order":"7","guidecategory":"4","title":"CLI Create Command","url":"cli-create","content":"<p>The create command generates and runs MySQL <code>CREATE TABLE<\/code> syntax for the given models. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php create user<\/pre>"},{"id":"7","order":"8","guidecategory":"4","title":"CLI Drop Command","url":"cli-drop","content":"<p>The drop command generates and runs MySQL <code>DROP TABLE<\/code> syntax for the given models. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php drop user<\/pre>"},{"id":"8","order":"10","guidecategory":"4","title":"CLI Sync Command","url":"cli-sync","content":"<p>The sync command drops and then recreates the MySQL tables for the given models. Useful for making quick model changes in development environments. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php sync user<\/pre>\r\n\r\n<p><strong>Note:<\/strong> MySQL tables are dropped and then recreated when running this command. They are not altered. This means that any data stored in the given models will be lost.<\/p>"},{"id":"9","order":"4","guidecategory":"4","title":"CLI Install Command","url":"cli-install","content":"<p>Creates MySQL tables for the User, Group, and Membership models if they don't already exist; creates 'admin' group if it doesn't exist; and prompts you to create an admin user. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php install<\/pre>\r\n\r\n<p><strong>Note:<\/strong> Only works with MultipleGroups auth plugin (which is the default). Running after insert error shouldn't mess up existing data.<\/p>"},{"id":"10","order":"3","guidecategory":"4","title":"CLI Generate Hash Command","url":"cli-generate-hash","content":"<p>Creates a random string and sets it to 'hash_secret' configuration option, which is used for hashing passwords. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php generate_hash_secret development<\/pre>\r\n\r\n<p><strong>Note:<\/strong> This will overwrite the app\/config\/&lt;config&gt;\/hash.php file.<\/p>"},{"id":"11","order":"12","guidecategory":"4","title":"CLI Export JSON Command","url":"cli-export-json","content":"<p>Exports the contents of the MySQL table for a model to a JSON formatted file. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php export_json user outfile.json<\/pre>"},{"id":"12","order":"13","guidecategory":"4","title":"CLI Import JSON Command","url":"cli-import-json","content":"<p>Imports the contents of a JSON formatted file to the MySQL table of the specified model. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php import_json user infile.json<\/pre>"},{"id":"13","order":"11","guidecategory":"4","title":"CLI Alter Add Command","url":"cli-alter-add","content":"<p>Adds a column to the MySQL table of the specified model. Column must be defined in the model for this to work.<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php alter_add user some_unsynced_column<\/pre>\r\n\r\n<p><strong>Note:<\/strong> Always make backups of important data before running this command!<\/p>"},{"id":"14","order":"5","guidecategory":"4","title":"CLI Create Controller Command","url":"cli-create-controller","content":"<p>Creates a controller file with the specified controller class name. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php create_controller Foo<\/pre>\r\n\r\n<p>This would create a controller file at <code>app\/controller\/foo.php<\/code> with the following content:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Controller;\r\n\r\nclass Foo extends \\Core\\Controller\\Base {\r\n\r\n}<\/pre>\r\n\r\n<p><strong>Note:<\/strong> Make sure to use the correct capitalization for the class name while using this command. For example, <code>bar<\/code> would be incorrect, but <code>Bar<\/code> would be fine.<\/p>"},{"id":"15","order":"6","guidecategory":"4","title":"CLI Create Model Command","url":"cli-create-model","content":"<p>Creates a model file with the specified model class name. Example usage:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php index.php create_model Foo<\/pre>\r\n\r\n<p>This would create a model file at <code>app\/model\/foo.php<\/code> with the following content:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\nnamespace App\\Model;\r\n\r\nclass Foo extends \\Core\\Model\\Base {\r\n\r\n}<\/pre>\r\n\r\n<p><strong>Note:<\/strong> Make sure to use the correct capitalization for the class name while using this command. For example, <code>bar<\/code> would be incorrect, but <code>Bar<\/code> would be fine.<\/p>"},{"id":"16","order":"4","guidecategory":"1","title":"Autoloading","url":"autoloading","content":"<p>Burner CMS uses a PHP feature known as <a href=\"http:\/\/php.net\/manual\/en\/language.oop5.autoload.php\">autoloading<\/a> to automatically include class files. To determine which files are loaded for which classes, Burner follows the <a href=\"https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-0.md\">PSR-0<\/a> standard pretty closely, but with some changes.<\/p>\r\n\r\n<p>For anyone new to the concept of autoloading, it's like this: you can use classes without having to manually include the class files yourself. Burner uses the namespace and class name to find and include the class file automatically for you.<\/p>\r\n<hr\/>\r\n\r\n<h3>Examples<\/h3>\r\n<p>Here's a few examples of classes and which files are loaded for them:<\/p>\r\n\r\n<ul>\r\n<li>&bull; <code>\\Foo<\/code> maps to <code>foo.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Foo<\/code> maps to <code>app\/foo.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Model\\Foo<\/code> maps to <code>app\/model\/foo.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Model\\Foo_Bar<\/code> maps to <code>app\/model\/foo\/bar.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Model\\Foo_Bar\\Baz<\/code> maps to <code>app\/model\/foo_bar\/baz.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Controller\\Baz<\/code> maps to <code>app\/controller\/baz.php<\/code><\/li>\r\n<li>&bull; <code>\\App\\Vendor\\Admin\\Controller\\Admin<\/code> maps to <code>app\/vendor\/admin\/controller\/admin.php<\/code><\/li>\r\n<\/ul>\r\n<hr\/>\r\n\r\n<h3>Exceptions<\/h3>\r\n<p>As stated above, there are exceptions to how Burner follows the PSR-0 standard. Here they are:<\/p>\r\n\r\n<ul>\r\n<li>&bull; File and directory names are always completely lowercase.<\/li>\r\n<li>&bull; <code>\\Core\\&lt;class&gt;<\/code> maps to <code>burner\/&lt;class&gt;.php<\/code><\/li>\r\n<li>&bull; <code>\\Library\\&lt;class&gt;<\/code> maps to <code>burner\/library\/&lt;class&gt;.php<\/code><\/li>\r\n<li>&bull; <code>\\Column\\&lt;class&gt;<\/code> maps to <code>burner\/column\/&lt;class&gt;.php<\/code><\/li>\r\n<\/ul>\r\n<hr\/>\r\n\r\n<h3>Customizations<\/h3>\r\n<p>Because 3rd-party PHP libraries come in a wide variety of class naming schemes, Burner allows you to specify additional autoloading rules. Here's an example:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\\Core\\Autoload::set('\/^Awesome\/', function($class_name) {\r\n\r\n    $path = str_replace('_', '\/', $class_name);\r\n    return \"awesome-library\/$path.php\";\r\n\r\n});<\/pre>\r\n\r\n<p><strong>Note:<\/strong> When used, this feature does add overhead to class autoloading, so use it sparingly. If you only need to load 3rd-party classes in one place, then consider placing this config code right before you need to load those 3rd-party classes. However, if you need to use those 3rd-party classes in many places, then <code>app\/config\/&lt;configuration&gt;\/config.php<\/code> might be a better place for this config code.<\/p>"},{"id":"17","order":"1","guidecategory":"1","title":"Start Here","url":"start-here","content":"<p>The best way to learn how to use Burner CMS is to just read through all of the guides in <strong>The Basics<\/strong> category. Start with the installation guide, skim over the guides which are designed to be overviews of important topics, and then go through the photo gallery tutorial. After that, then you should have a good enough idea of how Burner works to be able to understand the other guide categories.<\/p>"},{"id":"18","order":"2","guidecategory":"1","title":"Requirements","url":"requirements","content":"<p>A few things are required to install and run Burner CMS:<\/p>\r\n<ul>\r\n<li>&bull; Apache with Mod Rewrite enabled<\/li>\r\n<li>&bull; PHP 5.3 of higher<\/li>\r\n<li>&bull; MySQL<\/li>\r\n<\/ul>\r\n<hr\/>\r\n\r\n<h3>Highly Recommended<\/h3>\r\n<p>Access to the PHP command line interface is highly recommended, because it allows you to use all of Burner's helpful CLI development tools. Not sure if you have access? If you can get this command to run successfully from your terminal, then you should be all set:<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">php --version<\/pre>\r\n\r\n<p>If your web host doesn't support command line access, then we would highly recommend that you check out <a target=\"_blank\" href=\"https:\/\/www.linode.com\/\">Linode<\/a>. It's a very affordable and solid VPS hosting service. And no, we aren't getting paid to say this.<\/p>"},{"id":"19","order":"2","guidecategory":"2","title":"Select Queries","url":"model-select","content":"<p>Creating a basic select query is simple:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$query = \\App\\Model\\Article::select();\r\n$rows = $query-&gt;fetch();<\/pre>\r\n\r\n<p>The <code>select()<\/code> static method returns a <a href=\"..\/api\/latest\/Mysql.Select\">Mysql\\Select<\/a> object. The above example fetches all columns in the user table. This can be reduced by using method chaining:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()-&gt;fetch();<\/pre>\r\n\r\n<p><code>$rows<\/code> would then contain an array of <code>App\\Model\\Article<\/code> objects::<\/p>\r\n\r\n<pre class=\"prettyprint lang-xml\">Array\r\n(\r\n    [0] => App\\Model\\Article Object\r\n        (\r\n            [id] =&gt; 1\r\n            [title] =&gt; Hello, World!\r\n            [content] =&gt; The quick brown fox jumps over the lazy dog.\r\n        )\r\n\r\n    [1] => App\\Model\\Article Object\r\n        (\r\n            [id] =&gt; 2\r\n            [title] =&gt; Second Article\r\n            [content] =&gt; The lazy dog rests while the brown fox jumps.\r\n        )\r\n\r\n)<\/pre>\r\n<hr\/>\r\n\r\n<h3>Where<\/h3>\r\n<p>Valid operators include: =, !=, >, >=, <, <=, LIKE, MATCH, MATCH_BOOLEAN. Add where conditions to your queries like so:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;where('title', '=', 'Second Article')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>Adding multiple where conditions can be done by using the <code>and_where()<\/code> and <code>or_where()<\/code> methods:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;where('title', '=', 'Second Article')\r\n    -&gt;or_where('id', '!=', 2)\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>The methods <code>where_null()<\/code>, <code>where_not_null()<\/code>, <code>and_where_null()<\/code>, <code>and_where_not_null()<\/code>, <code>or_where_null()<\/code>, and <code>or_where_not_null()<\/code> also exist for selecting based on null-valued columns.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;where_null('content')\r\n    -&gt;fetch();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Ordering Results<\/h3>\r\n<p>You can order results by using the <code>order_desc()<\/code> and <code>order_asc()<\/code> methods:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;order_desc('id')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>Multiple order_desc() and order_asc() methods can be used in one query. However, it's important to note that order of use matters:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;order_desc('id')\r\n    -&gt;order_asc('title')\r\n    -&gt;fetch();\r\n\r\n\/\/ Not the same!\r\n\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;order_asc('title')\r\n    -&gt;order_desc('id')\r\n    -&gt;fetch();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Limit &amp; Offset<\/h3>\r\n<p>Setting a result limit or offset is easy:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Limit\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;limit(5)\r\n    -&gt;fetch();\r\n\r\n\/\/ Both\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;limit(5)\r\n    -&gt;offset(10)\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>To make pagination a little easier, the <code>page()<\/code> method is also provided. The first argument is the current page, and the second argument is the number of records per page.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;page(2, 10)\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>If you only need to select a single row, then using the <code>single()<\/code> method is the way to go. This will return an object if data is found matching the criteria, and <code>null<\/code> otherwise.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$one_row = \\App\\Model\\Article::select()\r\n    -&gt;where('title', '=', 'Second Article')\r\n    -&gt;single();<\/pre>\r\n\r\n<p>If you only need to select a single row based on its automatically assigned row ID, then use the <code>id()<\/code> static method.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$one_row = \\App\\Model\\Article::id(2);\r\n\r\n\/\/ Exactly like the following\r\n\r\n$one_row = \\App\\Model\\Article::select()\r\n    -&gt;where('id', '=', 2)\r\n    -&gt;single();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Selecting Specific Columns<\/h3>\r\n<p>If you only want to return specific columns, that is easy to do as well:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;column('title')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<pre class=\"prettyprint lang-xml\">Array\r\n(\r\n    [0] => App\\Model\\Article Object\r\n        (\r\n            [title] =&gt; Hello, World!\r\n        )\r\n\r\n    [1] => App\\Model\\Article Object\r\n        (\r\n            [title] =&gt; Second Article\r\n        )\r\n\r\n)<\/pre>\r\n\r\n<p><strong>Note:<\/strong> The column() method can be used multiple times to specify multiple columns that should be returned.<\/p>\r\n\r\n<p>Aliases can be provided as well:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;column('title', 'article_name')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<pre class=\"prettyprint lang-xml\">Array\r\n(\r\n    [0] => App\\Model\\Article Object\r\n        (\r\n            [article_name] =&gt; Hello, World!\r\n        )\r\n\r\n    [1] => App\\Model\\Article Object\r\n        (\r\n            [article_name] =&gt; Second Article\r\n        )\r\n\r\n)<\/pre>\r\n\r\n<p>It's also possible to select MIN, MAX, COUNT, SUM, and AVG columns:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;min_column('foo')\r\n    -&gt;max_column('bar')\r\n    -&gt;avg_column('baz')\r\n    -&gt;sum_column('some_column')\r\n    -&gt;count_column('another_column')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>These can be given aliases as well:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;min_column('foo', 'some_alias')\r\n    -&gt;fetch();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Joins<\/h3>\r\n<p>Many ORMs automatically join tables for the developer, but Burner CMS's ORM does not behave this way. The reason for this is simply that how such behavior actually works is often ambiguous to you, the application developer. Also, queries generated in such a way are not always as efficient as they should be. For these reasons, application developers still have to manually define join queries.<\/p>\r\n\r\n<p>We are sorry. Really, we are. If you have any ideas on how to streamline joins without adding ambiguity, then please submit a ticket in the issue tracker.<\/p>\r\n\r\n<p>With that said, join queries can be created in an object-oriented fashion by using the <code>inner_join()<\/code>, <code>left_join()<\/code>, or <code>right_join()<\/code> methods. The first argument is the table to join, the second is the first column to compare in the ON clause, the third is the comparison operator, and the last is the second column to compare:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Inner join\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;inner_join('user', 'user.id', '=', 'article.user')\r\n    -&gt;fetch();\r\n\r\n\/\/ Left join\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;left_join('user', 'user.id', '=', 'article.user')\r\n    -&gt;fetch();\r\n\r\n\/\/ Right join\r\n$rows = \\App\\Model\\Article::select()\r\n    -&gt;right_join('user', 'user.id', '=', 'article.user')\r\n    -&gt;fetch();<\/pre>\r\n\r\n<p>You can also use the column methods to select which columns are returned from the join:<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$rows = \\App\\Model\\Article::select()\r\n    -&gt;column('user.id', 'user_id')\r\n    -&gt;column('user.email', 'user_email')\r\n    -&gt;column('article.title', 'title')\r\n    -&gt;column('article.content', 'content')\r\n    -&gt;inner_join('user', 'user.id', '=', 'article.user')\r\n    -&gt;fetch();<\/pre>"},{"id":"20","order":"1","guidecategory":"2","title":"Insert & Update Queries","url":"model-insert-and-update","content":"<p>Inserting data into the database by using the ORM is a short process. First create an instance of the appropriate data model, then set the column values, and finally use the <code>save()<\/code> method to finally insert it.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$row = new \\App\\Model\\Article();\r\n$row-&gt;title = 'Quixotic Article';\r\n$row-&gt;content = 'The quick brown fox jumps over the lazy dog.';\r\n$row-&gt;save();\r\n\r\n\/\/ $row->id should now be set\r\necho $row->id;<\/pre>\r\n\r\n<p>Values for some special column types, such as the <code>Password<\/code> type, can't be set this way though. The reason is that when setting column values in this way, you are actually defining the raw values to be inserted into the database. Password columns are supposed to contain hashed data, so all Password columns automatically have a helper method named <code>set_<em>column_name<\/em>()<\/code>, which hashes and sets password values.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$row = new \\App\\Model\\User();\r\n$row-&gt;email = 'foo@gmail.com';\r\n$row-&gt;set_password('awesome');\r\n$row-&gt;save();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Update<\/h3>\r\n<p>Update queries also use the <code>save()<\/code> method. So how does Burner determine to run an update query instead of an insert? When the <code>id<\/code> property is not empty, then Burner assumes that the row already exists.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Update query\r\n$row = new \\App\\Model\\Article();\r\n$row-&gt;id = 1;\r\n$row-&gt;title = 'Quixotic Article';\r\n$row-&gt;content = 'The quick brown fox jumps over the lazy dog.';\r\n$row->save();\r\n\r\n\/\/ Insert query\r\n$row = new \\App\\Model\\Article();\r\n$row-&gt;title = 'Quixotic Article';\r\n$row-&gt;content = 'The quick brown fox jumps over the lazy dog.';\r\n$row-&gt;save();<\/pre>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Insert\r\n$row = new \\App\\Model\\Article();\r\n$row-&gt;title = 'Quixotic Article';\r\n$row-&gt;content = 'The quick brown fox jumps over the lazy dog.';\r\n$row->save();\r\n\r\n\/\/ Then update\r\n$row-&gt;title = 'New Title';\r\n$row-&gt;save();<\/pre>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Select single row\r\n$row = \\App\\Model\\Article::select()\r\n    -&gt;where('title', '=', 'Hello, World!')\r\n    -&gt;single();\r\n\r\n\/\/ Then update\r\nif($row !== null) {\r\n\r\n    $row-&gt;title = 'New Title';\r\n    $row-&gt;save();\r\n\r\n}<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3>Input Methods<\/h3>\r\n<p>Because web apps typically deal with a lot of form data, every Burner CMS model class has the <code>from_array()<\/code> and <code>from_post()<\/code> static helper methods. When passed an associative array of data, from_array() creates a new model instance and imports the given data. The main advantage of using this method is that it handles special column types - like password columns - automatically.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$row = \\App\\Model\\User::from_array(array('email' => 'foo@gmail.com', 'password' => 'awesome'));\r\n$row-&gt;save();<\/pre>\r\n\r\n<p>The <code>from_post()<\/code> method is a step up in usefulness from the <code>from_array()<\/code> method. This method takes an array of column names as its first argument, looks for those column names in <code>$_POST<\/code>, and finally uses from_array() to create a new model instance.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$row = \\App\\Model\\User::from_post(array('email', 'password'));\r\n$row-&gt;save();\r\n\r\n\/\/ Equivalent to this\r\n\r\n$row = new \\App\\Model\\User();\r\n$row-&gt;email = \\Library\\Input::post('email');\r\n$row-&gt;set_password(\\Library\\Input::post('password'));\r\n$row-&gt;save();<\/pre>\r\n\r\n<p>Additionally, the <code>merge_array()<\/code> and <code>merge_post()<\/code> non-static methods are available. These are just like from_array() and from_post() respectively, but they are used to override existing data. Usually they are used before an update operation.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Select single row\r\n$row = \\App\\Model\\Article::select()\r\n    -&gt;where('title', '=', 'Hello, World!')\r\n    -&gt;single();\r\n\r\n\/\/ Then update\r\nif($row !== null) {\r\n\r\n    $row-&gt;merge_post(array('title', 'content'));\r\n    $row-&gt;save();\r\n\r\n}<\/pre>"},{"id":"21","order":"21","guidecategory":"2","title":"Delete Queries","url":"model-delete","content":"<p>Delete queries work pretty much exactly like select queries.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Delete everything\r\n\\App\\Model\\Article::delete()-&gt;execute();\r\n\r\n\/\/ Delete one specific row\r\n\\App\\Model\\Article::delete()\r\n    -&gt;where('title', '=', 'Hello, World!')\r\n    -&gt;limit(1)\r\n    -&gt;execute();<\/pre>\r\n\r\n<p>Records can also be deleted by using the <code>erase()<\/code> method. This method takes all populated column properties of an object, and then creates WHERE conditions with them.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Select a single row\r\n$row = \\App\\Model\\Article::id(2);\r\n\r\n\/\/ Delete it\r\nif($row !== null) {\r\n\r\n    $row-&gt;erase();\r\n\r\n}<\/pre>\r\n\r\n<p>Note that erase() doesn't limit the number of records deleted, so a query like the following could possibly delete more than one record.<\/p>\r\n\r\n<pre class=\"prettyprint lang-php\">$row = new \\App\\Model\\Article();\r\n$row-&gt;title = 'Hello, World!';\r\n$row-&gt;erase();\r\n\r\n\/\/ Same as this\r\n\r\n\\App\\Model\\Article::delete()\r\n    -&gt;where('title', '=', 'Hello, World!')\r\n    -&gt;execute();<\/pre>"},{"id":"22","order":"22","guidecategory":"2","title":"Column Types","url":"model-column-types","content":"<hr\/>\r\n<ul>\r\n<li>&bull; <a href=\"#boolean\">Boolean<\/a><\/li>\r\n<li>&bull; <a href=\"#char\">Char<\/a><\/li>\r\n<li>&bull; <a href=\"#date\">Date<\/a><\/li>\r\n<li>&bull; <a href=\"#decimal\">Decimal<\/a><\/li>\r\n<li>&bull; <a href=\"#email\">Email<\/a><\/li>\r\n<li>&bull; <a href=\"#file\">File<\/a><\/li>\r\n<li>&bull; <a href=\"#image\">Image<\/a><\/li>\r\n<\/ul>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"boolean\">Boolean<\/h3>\r\n<p>Used for storing boolean values (1 or 0). Internally uses the MySQL <code>TINYINT(1)<\/code> type.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Boolean\r\n     *\/\r\n    public $col_name;\r\n\r\n}<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"char\">Char<\/h3>\r\n<p>Used for storing string values. Internally uses the MySQL <a target=\"_blank\" href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.0\/en\/char.html\">char<\/a> type. <code>length<\/code> option is required.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Char\r\n     * @option length = 100\r\n     *\/\r\n    public $col_name;\r\n\r\n}<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"date\">Date<\/h3>\r\n<p>Used for storing dates. Internally uses the MySQL <a target=\"_blank\" href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.1\/en\/datetime.html\">date<\/a> type.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Date\r\n     *\/\r\n    public $col_name;\r\n\r\n}<\/pre>\r\n\r\n<p><strong>Note:<\/strong> When storing data in a date column, be sure to use the <code>YYYY-MM-DD<\/code> format. Invalid dates are converted to <code>0000-00-00<\/code> by MySQL.<\/p>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"decimal\">Decimal<\/h3>\r\n<p>Used for storing exact numeral data values. Internally uses the MySQL <a target=\"_blank\" href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.0\/en\/fixed-point-types.html\">decimal<\/a> type. <code>max<\/code> and <code>digits<\/code> options are required. Max represents the precision, and digits represents the scale. The names of these options may be changed, because they are currently misleading.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Decimal\r\n     * @option max= 7\r\n     * @option digits = 2\r\n     *\/\r\n    public $col_name;\r\n\r\n}<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"email\">Email<\/h3>\r\n<p>Used for email addresses. An extension of the Varchar type. It has added validation to check to make sure that the given data is a correctly formatted email address. <code>length<\/code> option is required.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Email\r\n     * @option length = 200\r\n     *\/\r\n    public $col_name;\r\n\r\n}<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"file\">File<\/h3>\r\n<p>Used for storing uploaded files. An extension of the Char type. Files are uploaded to a specified location, and the file extension is stored in the database column.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = File\r\n     *\/\r\n    public $attachment;\r\n\r\n    public function attachment_path() {\r\n\r\n        return \"static\/attachments\/{$this-&gt;id}\";\r\n\r\n    }\r\n\r\n}<\/pre>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Uploading a file\r\n$row = \\App\\Model\\Foo::from_post(array('attachment'), true);\r\n$errors = $row-&gt;valid();\r\n\r\nif(empty($errors)) {\r\n\r\n    $row-&gt;save();\r\n\r\n}\r\n\r\n\/\/ Get file URL\r\necho $row-&gt;attachment_url();<\/pre>\r\n<hr\/>\r\n\r\n\r\n<h3 id=\"image\">Image<\/h3>\r\n<p>Used for storing uploaded image files. An extension of the File type. Images are uploaded to a specified location, and the file extension is stored in the database column. Validates that uploaded files are images.<\/p>\r\n<pre class=\"prettyprint lang-php\">class Foo extends \\Core\\Model\\Base {\r\n\r\n    \/**\r\n     * @option type = Image\r\n     *\/\r\n    public $attachment;\r\n\r\n    public function attachment_path() {\r\n\r\n        return \"static\/attachments\/{$this-&gt;id}\";\r\n\r\n    }\r\n\r\n}<\/pre>\r\n\r\n<pre class=\"prettyprint lang-php\">\/\/ Uploading an image\r\n$row = \\App\\Model\\Foo::from_post(array('attachment'), true);\r\n$errors = $row-&gt;valid();\r\n\r\nif(empty($errors)) {\r\n\r\n    $row-&gt;save();\r\n\r\n}\r\n\r\n\/\/ Get file URL\r\necho $row-&gt;attachment_url();<\/pre>"}]